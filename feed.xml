<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://satpreetmakhija.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://satpreetmakhija.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-28T14:12:19+00:00</updated><id>https://satpreetmakhija.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Why are complex numbers suitable for 2D plane representation?</title><link href="https://satpreetmakhija.github.io/blog/2024/complex-numbers/" rel="alternate" type="text/html" title="Why are complex numbers suitable for 2D plane representation?"/><published>2024-04-21T17:12:00+00:00</published><updated>2024-04-21T17:12:00+00:00</updated><id>https://satpreetmakhija.github.io/blog/2024/complex-numbers</id><content type="html" xml:base="https://satpreetmakhija.github.io/blog/2024/complex-numbers/"><![CDATA[<p>How do you represent a 2D flat surface? The canonical way is using cartesian coordinates. I’ll show you why cartesian system or the polar coordinates is not the ideal choice but complex number is to represent 2D surface.</p> <h2 id="what-are-our-requirements">What are our requirements?</h2> <p>We want our representation of a point so that it is easy to add it to another point and we want rotation of a point to be easy too.</p> <h2 id="what-cartesian-coordinates-lack">What cartesian coordinates lack?</h2> <p>Each point in the cartesian coordinate system can be written as \((x,y)\) where \(x\) denotes the distance you walk from the origin in the X axis direction and \(y\) in the Y axis direction. Addition definition is trivial in cartesian coordinates. Given two points, \((x_1, y_1)\) and \((x_2, y_2)\), we can easily add them as \((x_1+x_2, y_1+y_2)\).</p> <p>Rotation is where coordinates system becomes difficult to use. How do we rotate this point by an angle \(\theta\). We’ll have to use trignometric properties. Let \(R\) be the function that rotates \((x,y)\) by a given angle. \(R(x,y) = x*R(1,0) + y*R(0,1)\) \(R(1,0) = (\cos \theta, \sin \theta), R(0,1) = (-\sin \theta, \cos \theta)\) \(\therefore R(x,y) = x*(\cos \theta, \sin \theta) + y*(-\sin \theta, \cos \theta)\) That’s a lot of steps for a simple operation of rotating a point in cartesian coordinates.</p> <h2 id="what-polar-coordinates-lack">What polar coordinates lack?</h2> <p>A 2D point in polar coordinates is represented as \((x,\theta)\) where x represents the distance from the origin and \(\theta\) is the angle. Rotation by \(\phi\) is simply \((x, \theta+\phi)\). But, addition is not defined in polar coordinates this way. Given two points \((x_1,\theta_2)\) and \((x_2,\theta_2)\), their sum is NOT \((x_1+x_2, \theta_1 + \theta_2)\).</p> <p>To add two points in polar coordinates, we’ll first have to convert them to cartesian coordinates and then add them up as we do in cartesian coordinates.</p> <h2 id="what-complex-numbers-solve">What complex numbers solve?</h2> <p>Representation of a point in 2D plane using a complex number makes addition as well as rotation of points easy. A complex number is written as \(z = a + \iota b\) where \(a\) is the real part and \(b\) is the imaginary part. We’ll represent a 2D point in complex number form as \(z = r(\cos \theta + \iota \sin \theta)\). Addition of two points will simply follow as addition defined in complex numbers. \(z_1 = r_1(\cos \theta_1 + \iota \sin \theta_1)\) and \(z_2 = r_2(\cos \theta_2 + \iota \sin \theta_2)\) How do we define rotation by \(\phi\) for \(z = r(\cos \theta + \iota \sin \theta)\) ? This is where a theorem by Euler helps. \(z = r(\cos \theta + \iota \sin \theta) = r \iota^{\theta}\). We define rotation by \(\phi\) as \(r \iota^{\theta + \phi}\). Hence, representation of a 2D flat surface using complex numbers provides easy ways to add and rotate points.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[How do you represent a 2D flat surface? The canonical way is using cartesian coordinates. I’ll show you why cartesian system or the polar coordinates is not the ideal choice but complex number is to represent 2D surface.]]></summary></entry><entry><title type="html">How to avoid prompt injection attack by following prompt engineering best practices?</title><link href="https://satpreetmakhija.github.io/blog/2023/prompt-injection-attack/" rel="alternate" type="text/html" title="How to avoid prompt injection attack by following prompt engineering best practices?"/><published>2023-07-11T17:39:00+00:00</published><updated>2023-07-11T17:39:00+00:00</updated><id>https://satpreetmakhija.github.io/blog/2023/prompt-injection-attack</id><content type="html" xml:base="https://satpreetmakhija.github.io/blog/2023/prompt-injection-attack/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[using language models in production comes with its own risks. Read the article to learn how to mitigate them.]]></summary></entry><entry><title type="html">GPUs: Why you can never have enough?</title><link href="https://satpreetmakhija.github.io/blog/2023/GPUs-substack-article/" rel="alternate" type="text/html" title="GPUs: Why you can never have enough?"/><published>2023-04-28T17:39:00+00:00</published><updated>2023-04-28T17:39:00+00:00</updated><id>https://satpreetmakhija.github.io/blog/2023/GPUs-substack-article</id><content type="html" xml:base="https://satpreetmakhija.github.io/blog/2023/GPUs-substack-article/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[the real reason why GPUs are in demand and why it's not going to stop]]></summary></entry><entry><title type="html">Context Revolution: Taking machines beyond algorithm</title><link href="https://satpreetmakhija.github.io/blog/2023/Context-Revolution/" rel="alternate" type="text/html" title="Context Revolution: Taking machines beyond algorithm"/><published>2023-02-07T17:39:00+00:00</published><updated>2023-02-07T17:39:00+00:00</updated><id>https://satpreetmakhija.github.io/blog/2023/Context-Revolution</id><content type="html" xml:base="https://satpreetmakhija.github.io/blog/2023/Context-Revolution/"><![CDATA[<p>The computation revolution started when we built general purpose computers to follow instructions. A computer follows an algorithm step by step. It doesn’t need to <i>understand</i> the algorithm.</p> <p>Here’s an example to illustrate the difference between <i>understanding</i> something and following an algorithm. There’s a world renowned chef, Andre, who makes a special pasta dish. Andre lost both his arms (sorry Andre). He hires you to make this dish. You don’t know anything about how to make this dish. You don’t know these ingredients, how they taste, which ones blend together. But, Andre is great at communication. He gives you step by step procedure to make the dish and you follow along with him. Voila! You made the special pasta only Andre knows how to make. Andre <i>understands</i> how to make this special pasta. You followed an algorithm. But what is it that Andre has that you don’t? Context. He knows the flavour of the ingredients, he knows what they taste like, he knows which ingredients complement each other and which don’t. He has context around the algorithm. This context is what I proxy for as understanding.</p> <p>The AI revolution is about giving computers more context around the computation they perform.</p> <p>“Write me a function to add five numbers.” - you give the prompt to a language model that runs on a computer. The computer doesn’t have an algorithm to give you the output you want. It only knows how to execute an algorithm. The language model contains the context to make head and tails of the prompt. We will provide this context to computers via AI such as natural language, our physical reality, our visual imagery, anything and everything we have access to. With time they will have as much context as we do. This is what I call the Context Revolution.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[how AI changes computations performed by a computer]]></summary></entry></feed>